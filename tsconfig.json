{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"],
      "contentlayer/generated": ["./.contentlayer/generated"] 
      // Creates an import alias for Contentlayer's generated files
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", ".contentlayer/generated"], // Include Contentlayer's generated TypeScript files in the compilation process
  "exclude": ["node_modules"]
}

//What is difference between adding .contentlayer/generated to the include and paths? 
/*
The difference is:
include: Tells TypeScript "these are files you need to compile and type-check"
Without this, TypeScript wouldn't know these files exist and should be processed
Think of it as "what files should TypeScript look at?"
paths: Creates an import alias that tells TypeScript "when someone writes this import path, look in this location"
Without this, you'd have to write: import { allPosts } from '../.contentlayer/generated'
Think of it as "what shortcut name should I use to import these files?"
A real-world analogy:
include is like telling your IDE "scan these folders for files"
paths is like creating a shortcut/alias on your desktop to a deeply nested folder
You need both:
include to make TypeScript aware of the files
paths to import them conveniently in your code
*/